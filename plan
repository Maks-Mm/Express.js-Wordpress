JS (CodePen)

function Posts() {
  const [posts, setPosts] = React.useState([]);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState(null);
  const [selectedPost, setSelectedPost] = React.useState(null);

  React.useEffect(() => {
    fetchPosts();
  }, []);

  const fetchPosts = async () => {
    try {
      setLoading(true);
      setError(null);
      const res = await fetch("https://example.com/api/posts"); // Change to your real API
      if (!res.ok) throw new Error("Failed to load posts");
      const data = await res.json();
      setPosts(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="center">
        <div className="loader"></div>
        <p>Loading posts...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="center">
        <p className="error">⚠️ {error}</p>
        <button onClick={fetchPosts}>Try again</button>
      </div>
    );
  }

  if (selectedPost) {
    return (
      <div className="post-container">
        <button className="back-btn" onClick={() => setSelectedPost(null)}>← Back</button>
        <h1 dangerouslySetInnerHTML={{ __html: selectedPost.title.rendered }} />
        <p className="date">{new Date(selectedPost.date).toLocaleDateString()}</p>
        <div
          className="post-content"
          dangerouslySetInnerHTML={{ __html: selectedPost.content.rendered }}
        />
      </div>
    );
  }

  return (
    <div className="posts">
      <h1>Our Blog</h1>
      <p className="subtitle">Latest posts and updates</p>

      {posts.length === 0 ? (
        <p>No posts found.</p>
      ) : (
        posts.map((post) => (
          <div
            key={post.id}
            className="post-card"
            onClick={() => setSelectedPost(post)}
          >
            <h2 dangerouslySetInnerHTML={{ __html: post.title.rendered }} />
            <p className="date">{new Date(post.date).toLocaleDateString()}</p>
            <div
              className="excerpt"
              dangerouslySetInnerHTML={{
                __html:
                  post.excerpt.rendered.length > 200
                    ? post.excerpt.rendered.slice(0, 200) + "..."
                    : post.excerpt.rendered,
              }}
            />
            <button>Read Full Article</button>
          </div>
        ))
      )}
    </div>
  );
}

ReactDOM.createRoot(document.getElementById("root")).render(<Posts />);


---

CSS (CodePen)

Paste this into the CSS section:

body {
  font-family: "Inter", sans-serif;
  background: #f9fafb;
  margin: 0;
  padding: 20px;
  color: #111827;
}

.center {
  text-align: center;
  margin-top: 100px;
}

.loader {
  border: 4px solid #e5e7eb;
  border-top: 4px solid #3b82f6;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  animation: spin 1s linear infinite;
  margin: 0 auto 10px;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.error {
  color: #dc2626;
  font-weight: bold;
}

.posts {
  max-width: 700px;
  margin: 0 auto;
}

h1 {
  text-align: center;
  margin-bottom: 0.25em;
}

.subtitle {
  text-align: center;
  color: #6b7280;
  margin-bottom: 2em;
}

.post-card {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
  padding: 20px;
  margin-bottom: 20px;
  cursor: pointer;
  transition: all 0.3s;
}

.post-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
}

.post-card h2 {
  margin-top: 0;
  color: #111827;
}

.date {
  font-size: 0.875rem;
  color: #6b7280;
  margin-bottom: 1em;
}

.excerpt {
  color: #374151;
  line-height: 1.6;
  margin-bottom: 1em;
}

.post-card button {
  background: #3b82f6;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: 0.3s;
}

.post-card button:hover {
  background: #1d4ed8;
}

.post-container {
  max-width: 700px;
  margin: 0 auto;
  background: white;
  padding: 30px;
  border-radius: 12px;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
}

.back-btn {
  display: inline-block;
  margin-bottom: 20px;
  background: none;
  border: none;
  color: #3b82f6;
  font-weight: bold;
  cursor: pointer;
}

.post-content img {
  max-width: 100%;
  border-radius: 8px;
  margin: 1em 0;
}

.post-content p {
  line-height: 1.7;
  color: #374151;
}

additional variation ,buttons with new styles :

import { useEffect, useState } from "react";

interface WordPressPost {
  id: number;
  title: { rendered: string };
  content: { rendered: string };
  excerpt: { rendered: string };
  date: string;
  slug: string;
  featured_media?: number;
}

export default function Posts() {
  const [posts, setPosts] = useState<WordPressPost[]>([]);
  const [selectedPost, setSelectedPost] = useState<WordPressPost | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchPosts();
  }, []);

  const fetchPosts = async () => {
    setLoading(true);
    setError(null);
    setSelectedPost(null);

    try {
      const res = await fetch("http://localhost:5000/api/posts");
      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
      const data: WordPressPost[] = await res.json();
      setPosts(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load posts");
    } finally {
      setLoading(false);
    }
  };

  const handlePostClick = (post: WordPressPost) => {
    setSelectedPost(post);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const handleBackClick = () => setSelectedPost(null);

  if (loading) {
    return (
      <div className="flex flex-col justify-center items-center min-h-[50vh] text-center">
        <div className="loader border-4 border-gray-200 border-t-blue-600 rounded-full w-10 h-10 animate-spin mb-3"></div>
        <p className="text-gray-600">Loading posts...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-16">
        <p className="text-red-600 font-semibold mb-4">⚠️ {error}</p>
        <button
          onClick={fetchPosts}
          className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
        >
          Try Again
        </button>
      </div>
    );
  }

  if (selectedPost) {
    return (
      <div className="max-w-3xl mx-auto bg-white rounded-2xl shadow-lg p-8 mt-8">
        <button
          onClick={handleBackClick}
          className="text-blue-600 hover:text-blue-800 font-semibold mb-6 transition-colors"
        >
          ← Back
        </button>

        <h1
          className="text-3xl font-bold text-gray-900 mb-2"
          dangerouslySetInnerHTML={{ __html: selectedPost.title.rendered }}
        />
        <p className="text-sm text-gray-500 mb-6">
          {new Date(selectedPost.date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })}
        </p>

        <div
          className="prose prose-lg max-w-none text-gray-800"
          dangerouslySetInnerHTML={{ __html: selectedPost.content.rendered }}
        />
      </div>
    );
  }

  return (
    <div className="max-w-3xl mx-auto px-4 py-10">
      <header className="text-center mb-10">
        <h1 className="text-4xl font-bold text-gray-900 mb-2">Our Blog</h1>
        <p className="text-lg text-gray-600 mb-2">Latest posts and updates</p>
        {posts.length > 0 && (
          <p className="text-sm text-gray-500">
            Showing {posts.length} post{posts.length !== 1 ? "s" : ""}
          </p>
        )}
      </header>

      {posts.length === 0 ? (
        <p className="text-center text-gray-500 text-lg py-12">
          No posts found.
        </p>
      ) : (
        <div className="space-y-6">
          {posts.map((post) => (
            <article
              key={post.id}
              onClick={() => handlePostClick(post)}
              className="bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 p-6 cursor-pointer"
            >
              <h2
                className="text-2xl font-semibold text-gray-900 mb-1 hover:text-blue-600 transition-colors"
                dangerouslySetInnerHTML={{ __html: post.title.rendered }}
              />
              <p className="text-sm text-gray-500 mb-3">
                {new Date(post.date).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
              </p>

              <div
                className="text-gray-700 leading-relaxed mb-4"
                dangerouslySetInnerHTML={{
                  __html:
                    post.excerpt.rendered.length > 200
                      ? post.excerpt.rendered.slice(0, 200) + "..."
                      : post.excerpt.rendered,
                }}
              />

              {/* Glass Effect Button */}
              <button
                className="btn-glass"
                onClick={() => handlePostClick(post)}
              >
                Glass Effect
              </button>
            </article>
          ))}
        </div>
      )}
    </div>
  );
}

/* Add this CSS globally (e.g., in your globals.css or component-level CSS) */

<style jsx global>{`
  .btn-glass {
    padding: 14px 40px;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 20px rgba(255, 255, 255, 0.1);
  }

  .btn-glass:hover {
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 25px rgba(255, 255, 255, 0.2);
    transform: translateY(-3px);
  }

  .btn-glass:active {
    transform: translateY(0);
    box-shadow: 0 4px 15px rgba(255, 255, 255, 0.15);
  }
`}</style>


